{
  "version": 3,
  "sources": ["../src/v2.ts", "../src/viewport.ts", "../src/color.ts", "../src/raster.ts", "../src/graph.ts", "../src/transform2d.ts", "../src/drawables.ts", "../src/pixelbuffer.ts", "../src/textCache.ts", "../src/renderer.ts", "../src/tools.ts", "../src/scene.ts", "../src/debugUI.ts", "../src/legend.ts"],
  "sourcesContent": ["// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/v2.ts\n// Immutable-API style 2D vector with common ops\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nexport class V2 {\n  constructor(public readonly x: number = 0, public readonly y: number = 0) {}\n\n  clone(): V2 { return new V2(this.x, this.y); }\n\n  add(v: V2): V2 { return new V2(this.x + v.x, this.y + v.y); }\n  sub(v: V2): V2 { return new V2(this.x - v.x, this.y - v.y); }\n  scale(sx: number, sy: number = sx): V2 { return new V2(this.x * sx, this.y * sy); }\n  dot(v: V2): number { return this.x * v.x + this.y * v.y; }\n  perp(): V2 { return new V2(-this.y, this.x); }\n  len(): number { return Math.hypot(this.x, this.y); }\n  norm(): V2 { const l = this.len() || 1; return new V2(this.x / l, this.y / l); }\n\n  /** Rotate around optional pivot. Angle in radians, positive = CCW */\n  rotate(angle: number, around: V2 | null = null): V2 {\n    const c = Math.cos(angle), s = Math.sin(angle);\n    let x = this.x, y = this.y;\n    if (around) { x -= around.x; y -= around.y; }\n    const xr = x * c - y * s;\n    const yr = x * s + y * c;\n    return around ? new V2(xr + around.x, yr + around.y) : new V2(xr, yr);\n  }\n\n  toArray(): [number, number] { return [this.x, this.y]; }\n  static fromArray(a: readonly [number, number]): V2 { return new V2(a[0], a[1]); }\n  static lerp(a: V2, b: V2, t: number): V2 { return new V2(a.x + (b.x - a.x) * t, a.y + (b.y - a.y) * t); }\n}\n", "import { V2 } from \"./v2\";\nimport { ViewportRect } from \"./types\";\n\nfunction safeSpan(min: number, max: number, eps = 1e-9): [number, number] {\n    if (!isFinite(min) || !isFinite(max)) return [0, 1];\n    if (max - min < eps) {\n        const c = (min + max) / 2;\n        return [c - eps, c + eps];\n    }\n    return [min, max];\n}\n\n// -------------------- VIEWPORT MANAGER --------------------\nexport class ViewportManager {\n    app: any;\n    private _viewport: ViewportRect | ((app: any) => ViewportRect);\n    preserveAspect: string | boolean;\n    worldBounds: { xMin: number; xMax: number; yMin: number; yMax: number };\n    xTicks: number[];\n    yTicks: number[];\n\n    constructor(\n        app: any,\n        worldBounds: { xMin: number; xMax: number; yMin: number; yMax: number } | null = null,\n        _viewport: ViewportRect | ((app: any) => ViewportRect) | null = null,\n        preserveAspect: string | boolean = \"none\"\n    ) {\n        this.app = app;\n        this._viewport = _viewport || { x: 0, y: 0, width: app.size.x, height: app.size.y };\n        this.preserveAspect = preserveAspect;\n        this.worldBounds = worldBounds || { xMin: 0, xMax: 1, yMin: 0, yMax: 1 };\n        this.xTicks = [];\n        this.yTicks = [];\n        this.updateWorld(this.worldBounds);\n\n        if (this.app.canvas && this.app.canvas.parentElement) {\n            const ro = new ResizeObserver(() => {\n                const canvas = this.app.canvas;\n                const dpr = window.devicePixelRatio || 1;\n\n                canvas.width = canvas.clientWidth * dpr;\n                canvas.height = canvas.clientHeight * dpr;\n\n                this.app.size.x = canvas.clientWidth;\n                this.app.size.y = canvas.clientHeight;\n\n                autoScaleViewport(this, this.app.drawables || []);\n                if (this.app.render) this.app.render();\n            });\n            ro.observe(this.app.canvas.parentElement);\n        }\n    }\n\n    get viewport(): ViewportRect {\n        if (typeof this._viewport === \"function\") return this._viewport(this.app);\n\n        const canvas = this.app.canvas;\n        if (canvas && canvas.parentElement) {\n            const rect = canvas.parentElement.getBoundingClientRect();\n            const margin = 0; \n            return {\n                x: margin,\n                y: margin,\n                width: rect.width - 2 * margin,\n                height: rect.height - 2 * margin,\n            };\n        }\n\n        return this._viewport;\n    }\n\n    // Normalize preserveAspect to 'none' | 'square' | 'fit'\n    private aspectMode(): \"none\" | \"square\" | \"fit\" {\n        if (this.preserveAspect === true) return \"square\";\n        if (!this.preserveAspect || this.preserveAspect === \"none\") return \"none\";\n        const s = String(this.preserveAspect).toLowerCase();\n        if (s === \"square\") return \"square\";\n        if (s === \"fit\") return \"fit\";\n        return \"none\";\n    }\n\n    get scale(): V2 {\n        const { xMin, xMax, yMin, yMax } = this.worldBounds;\n        const s = xMax - xMin;\n        const o = yMax - yMin;\n        const a = this.viewport;\n\n        const mode = this.aspectMode();\n        if (mode === \"none\") return new V2(a.width / s, a.height / o);\n\n        const lx = a.width / s;\n        const ly = a.height / o;\n        const l = Math.min(lx, ly);\n        return new V2(l, l);\n    }\n\n    worldToCanvas(x: number, y: number): V2 {\n        const { xMin, xMax, yMin, yMax } = this.worldBounds;\n        const vp = this.viewport;\n        const u = xMax - xMin;\n        const v = yMax - yMin;\n\n        const mode = this.aspectMode();\n        if (mode !== \"none\") {\n            const scale = this.scale.x;\n            const w = scale * u;\n            const h = scale * v;\n            const offsetX = vp.x + (vp.width - w) / 2;\n            const offsetY = vp.y + (vp.height - h) / 2;\n            const px = offsetX + (x - xMin) * scale;\n            const py = offsetY + (yMax - y) * scale;\n            return new V2(px, py);\n        } else {\n            const scale = this.scale;\n            const px = vp.x + (x - xMin) * scale.x;\n            const py = vp.y + (yMax - y) * scale.y;\n            return new V2(px, py);\n        }\n    }\n\n    canvasToWorld(x: number, y: number): V2 {\n        const { xMin, xMax, yMin, yMax } = this.worldBounds;\n        const vp = this.viewport;\n        const u = xMax - xMin;\n        const v = yMax - yMin;\n\n        const mode = this.aspectMode();\n        if (mode !== \"none\") {\n            const scale = this.scale.x;\n            const w = scale * u;\n            const h = scale * v;\n            const offsetX = vp.x + (vp.width - w) / 2;\n            const offsetY = vp.y + (vp.height - h) / 2;\n            const wx = xMin + (x - offsetX) / scale;\n            const wy = yMax - (y - offsetY) / scale;\n            return new V2(wx, wy);\n        } else {\n            const scale = this.scale;\n            const wx = xMin + (x - vp.x) / scale.x;\n            const wy = yMax - (y - vp.y) / scale.y;\n            return new V2(wx, wy);\n        }\n    }\n\n    unitsToPixels(t: number): number {\n        return t * this.scale.x;\n    }\n\n    updateWorld(bounds: { xMin: number; xMax: number; yMin: number; yMax: number } | null = null, numTicks: number = 10) {\n        if (bounds) {\n            const [sxMin, sxMax] = safeSpan(bounds.xMin, bounds.xMax);\n            const [syMin, syMax] = safeSpan(bounds.yMin, bounds.yMax);\n            this.worldBounds = { xMin: sxMin, xMax: sxMax, yMin: syMin, yMax: syMax };\n        }\n        const { xMin, xMax, yMin, yMax } = this.worldBounds;\n        this.xTicks = this.computeTicks(xMin, xMax, numTicks);\n        this.yTicks = this.computeTicks(yMin, yMax, numTicks);\n    }\n\n    computeTicks(min: number, max: number, numTicks: number): number[] {\n        if (!isFinite(min) || !isFinite(max) || numTicks <= 0) return [];\n        if (Math.abs(max - min) < 1e-12) return [min];\n\n        const rawStep = (max - min) / numTicks;\n        const step = this.nicify(rawStep);\n        if (!isFinite(step) || step <= 0) return [min, max];\n\n        const start = Math.ceil(min / step) * step;\n        const ticks: number[] = [];\n        const maxIndex = Math.ceil((max - start) / step);\n        for (let i = 0; i <= maxIndex; i++) {\n            ticks.push(+((start + i * step).toFixed(10)));\n        }\n        return ticks;\n    }\n\n    nicify(step: number): number {\n        if (!isFinite(step) || step <= 0) return 1;\n        const e = Math.floor(Math.log10(step));\n        const f = step / Math.pow(10, e);\n        let nice: number;\n        if (f < 1.5) nice = 1;\n        else if (f < 3) nice = 2;\n        else if (f < 7) nice = 5;\n        else nice = 10;\n        return nice * Math.pow(10, e);\n    }\n\n    fitToBounds(boundsArray: { xMin: number; xMax: number; yMin: number; yMax: number }[], padding: number = 0.05) {\n        if (!boundsArray || boundsArray.length === 0) return;\n\n        let xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity;\n        for (const b of boundsArray) {\n            if (!b) continue;\n            xMin = Math.min(xMin, b.xMin);\n            xMax = Math.max(xMax, b.xMax);\n            yMin = Math.min(yMin, b.yMin);\n            yMax = Math.max(yMax, b.yMax);\n        }\n        if (!isFinite(xMin) || !isFinite(xMax) || !isFinite(yMin) || !isFinite(yMax)) return;\n        [xMin, xMax] = safeSpan(xMin, xMax);\n        [yMin, yMax] = safeSpan(yMin, yMax);\n\n        const width = xMax - xMin;\n        const height = yMax - yMin;\n        const padX = padding < 1 ? width * padding : padding;\n        const padY = padding < 1 ? height * padding : padding;\n\n        xMin -= padX; xMax += padX;\n        yMin -= padY; yMax += padY;\n\n        const mode = this.aspectMode();\n        if (mode === \"square\") {\n            const dx = xMax - xMin;\n            const dy = yMax - yMin;\n            const span = Math.max(dx, dy);\n            const cx = (xMin + xMax) / 2;\n            const cy = (yMin + yMax) / 2;\n            xMin = cx - span / 2; xMax = cx + span / 2;\n            yMin = cy - span / 2; yMax = cy + span / 2;\n        } else if (mode === \"fit\") {\n            try {\n                const vp = this.viewport;\n                const pixelAspect = vp.width / Math.max(1, vp.height);\n                const worldAspect = (xMax - xMin) / Math.max(1e-12, (yMax - yMin));\n                if (worldAspect > pixelAspect) {\n                    const targetDy = (xMax - xMin) / pixelAspect;\n                    const cy = (yMin + yMax) / 2;\n                    yMin = cy - targetDy / 2; yMax = cy + targetDy / 2;\n                } else {\n                    const targetDx = (yMax - yMin) * pixelAspect;\n                    const cx = (xMin + xMax) / 2;\n                    xMin = cx - targetDx / 2; xMax = cx + targetDx / 2;\n                }\n            } catch (e) {}\n        }\n\n        this.worldBounds = { xMin, xMax, yMin, yMax };\n        this.updateWorld(this.worldBounds);\n    }\n}\n\nexport function getDivViewport(el: HTMLElement, margin: number = 30): ViewportRect {\n    const rect = el.getBoundingClientRect();\n    return { x: margin, y: margin, width: rect.width - 2 * margin, height: rect.height - 2 * margin };\n}\n\nexport function getDrawableBounds(d: any) {\n    try {\n        if (d == null) return null;\n        if (Array.isArray(d.data) && d.data.length) {\n            const xs = d.data.map((p: any) => p.x);\n            const ys = d.data.map((p: any) => p.y);\n            return { xMin: Math.min(...xs), xMax: Math.max(...xs), yMin: Math.min(...ys), yMax: Math.max(...ys) };\n        } else if (Array.isArray(d.points) && d.points.length) {\n            const xs = d.points.map((p: any) => p.x);\n            const ys = d.points.map((p: any) => p.y);\n            return { xMin: Math.min(...xs), xMax: Math.max(...xs), yMin: Math.min(...ys), yMax: Math.max(...ys) };\n        } else if (d.pos) {\n            let xMin = d.pos.x, xMax = d.pos.x, yMin = d.pos.y, yMax = d.pos.y;\n            if (typeof d.radius === \"number\") {\n                xMin = d.pos.x - d.radius;\n                xMax = d.pos.x + d.radius;\n                yMin = d.pos.y - d.radius;\n                yMax = d.pos.y + d.radius;\n            }\n            return { xMin, xMax, yMin, yMax };\n        } else if (d.p1 && d.p2) {\n            const xs = [d.p1.x, d.p2.x];\n            const ys = [d.p1.y, d.p2.y];\n            return { xMin: Math.min(...xs), xMax: Math.max(...xs), yMin: Math.min(...ys), yMax: Math.max(...ys) };\n        } else if (d.grid) {\n            return { xMin: 0, xMax: (d.grid[0] || []).length, yMin: 0, yMax: d.grid.length };\n        } else if (d.bounds && isFinite(d.bounds.xMin) && isFinite(d.bounds.xMax) && isFinite(d.bounds.yMin) && isFinite(d.bounds.yMax)) {\n            return d.bounds;\n        }\n    } catch (e) {}\n    return null;\n}\n\nexport function autoScaleViewport(vp: ViewportManager, drawables: any[], padding: number = 0.05) {\n    const boundsArr = drawables.map(getDrawableBounds).filter(b => b != null);\n    if (!boundsArr.length) return;\n    vp.fitToBounds(boundsArr as any, padding);\n}\n", "// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/color.ts\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport type { RGBA, ColorLike } from \"./types\";\n\n/** Named colors (sRGB) \u2192 RGBA (0..255) */\nexport const NAMED: Readonly<Record<string, RGBA>> = Object.freeze({\n  black: [0, 0, 0, 255], white: [255, 255, 255, 255], red: [255, 0, 0, 255], green: [0, 255, 0, 255],\n  blue: [0, 0, 255, 255], yellow: [255, 255, 0, 255], cyan: [0, 255, 255, 255], magenta: [255, 0, 255, 255],\n  gray: [128, 128, 128, 255], grey: [128, 128, 128, 255], orange: [255, 165, 0, 255],\n  transparent: [0, 0, 0, 0]\n});\n\nexport function clamp255(v: number): number { return v < 0 ? 0 : v > 255 ? 255 : v | 0; }\nexport function clamp01(v: number): number { return v < 0 ? 0 : v > 1 ? 1 : v; }\n\n/** Parse CSS-like colors into [r,g,b,a] (0..255). Returns null if invalid. */\nexport function parseColor(c: ColorLike): RGBA | null {\n  if (Array.isArray(c)) {\n    const [r, g, b, a = 255] = c as number[];\n    return [r | 0, g | 0, b | 0, a | 0];\n  }\n  if (typeof c !== \"string\") return null;\n  const s = c.trim().toLowerCase();\n  if (s in NAMED) return NAMED[s];\n\n  if (s[0] === \"#\") {\n    const hex = s.slice(1);\n    const len = hex.length;\n    const hx = (i: number) => parseInt(hex[i] + (len < 6 ? hex[i] : hex[i + 1] || hex[i]), 16);\n    switch (len) {\n      case 3: return [hx(0), hx(1), hx(2), 255];\n      case 4: return [hx(0), hx(1), hx(2), hx(3)];\n      case 6: return [parseInt(hex.slice(0, 2), 16), parseInt(hex.slice(2, 4), 16), parseInt(hex.slice(4, 6), 16), 255];\n      case 8: return [parseInt(hex.slice(0, 2), 16), parseInt(hex.slice(2, 4), 16), parseInt(hex.slice(4, 6), 16), parseInt(hex.slice(6, 8), 16)];\n      default: return null;\n    }\n  }\n\n  if (s.startsWith(\"rgb\")) {\n    const nums = s.match(/\\d+\\.?\\d*/g);\n    if (!nums || (nums.length !== 3 && nums.length !== 4)) return null;\n    const r = clamp255(+nums[0]);\n    const g = clamp255(+nums[1]);\n    const b = clamp255(+nums[2]);\n    const a = nums[3] == null ? 255 : (clamp01(+nums[3]) * 255 + 0.5) | 0;\n    return [r, g, b, a];\n  }\n  return null;\n}\n\n/** Pack [r,g,b,a] \u2192 ABGR uint32 for fast TypedArray blits (little-endian). */\nexport function packABGR(r: number, g: number, b: number, a: number): number {\n  return (a << 24) | (b << 16) | (g << 8) | r;\n}\n\n/** Unpack ABGR uint32 \u2192 [r,g,b,a] */\nexport function unpackABGR(px: number): RGBA {\n  return [px & 255, (px >>> 8) & 255, (px >>> 16) & 255, (px >>> 24) & 255];\n}\n\n/** Canonical Porter-Duff source-over blend. Inputs are non-premultiplied 0..255. */\nexport function blendRGBA(dr: number, dg: number, db: number, da: number, sr: number, sg: number, sb: number, sa: number): [number, number, number, number] {\n  const dna = da / 255, sna = sa / 255;\n  const outA = sna + dna * (1 - sna);\n  if (outA <= 0) return [0, 0, 0, 0];\n  const inv = 1 - sna;\n  const r = (sr * sna + dr * dna * inv) / outA;\n  const g = (sg * sna + dg * dna * inv) / outA;\n  const b = (sb * sna + db * dna * inv) / outA;\n  return [r, g, b, outA * 255];\n}\n\n/** Normalize any color-like into RGBA (falls back to white). */\nexport function toColor(col: ColorLike): RGBA {\n  if (Array.isArray(col)) {\n    const arr: number[] = col;\n    const rgba: RGBA = [\n      arr[0] | 0,\n      arr[1] | 0,\n      arr[2] | 0,\n      (arr[3] ?? 255) | 0\n    ] as RGBA;\n    return rgba;\n  } else {\n    return (parseColor(col) || NAMED.white) as RGBA;\n  }\n}\n", "\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/raster.ts\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { V2 } from \"./v2\";\nimport { toColor, blendRGBA } from \"./color\";\nimport { CanvasRenderer } from \"./renderer\";\n\nexport function rawLine(app: CanvasRenderer, p0: V2, p1: V2, color: Readonly<[number, number, number, number]>): void {\n  const col = color;\n  let x0 = Math.round(p0.x), y0 = Math.round(p0.y);\n  const x1 = Math.round(p1.x), y1 = Math.round(p1.y);\n\n  const dx = Math.abs(x1 - x0), dy = Math.abs(y1 - y0);\n  const sx = x0 < x1 ? 1 : -1, sy = y0 < y1 ? 1 : -1;\n  let err = dx - dy;\n  const buf = app.buffer;\n  while (true) {\n    buf.putPixelBlend(x0, y0, col);\n    if (x0 === x1 && y0 === y1) break;\n    const e2 = err << 1;\n    if (e2 > -dy) { err -= dy; x0 += sx; }\n    if (e2 < dx) { err += dx; y0 += sy; }\n  }\n}\n\nexport interface RawPointOptions { type?: \"circle\" | \"cross\" | \"square\"; size?: number }\n\nexport function rawPoint(app: CanvasRenderer, pos: V2, color: Readonly<[number, number, number, number]>, { type = \"circle\", size = 3 }: RawPointOptions = {}): void {\n  if (type === \"circle\") {\n    fillCircle(app, pos, size, color);\n  } else if (type === \"cross\") {\n    rawLine(app, new V2(pos.x - size, pos.y), new V2(pos.x + size, pos.y), color);\n    rawLine(app, new V2(pos.x, pos.y - size), new V2(pos.x, pos.y + size), color);\n  } else if (type === \"square\") {\n    const half = size | 0;\n    const p = [ new V2(pos.x - half, pos.y - half), new V2(pos.x + half, pos.y - half), new V2(pos.x + half, pos.y + half), new V2(pos.x - half, pos.y + half) ];\n    strokeShape(app, p, color, 1);\n  }\n}\n\nexport function strokeShape(app: CanvasRenderer, points: V2[], color: Readonly<[number, number, number, number]>, width: number = 1): void {\n  for (let i = 0; i < points.length; i++) {\n    const p0 = points[i];\n    const p1 = points[(i + 1) % points.length];\n    if (width <= 1) { rawLine(app, p0, p1, color); continue; }\n    const d = p1.sub(p0); const len = d.len() || 1;\n    const u = d.scale(1 / len);\n    const n = new V2(-u.y, u.x);\n    const half = (width / 2) | 0;\n    for (let o = -half; o <= half; o++) {\n      const off = n.scale(o);\n      rawLine(app, p0.add(off), p1.add(off), color);\n    }\n  }\n}\n\nexport function fillCircle(app: CanvasRenderer, c: V2, r: number, color: Readonly<[number, number, number, number]>): void {\n  const r2 = r * r;\n  const xMin = Math.max(0, Math.floor(c.x) | 0);\n  const xMax = Math.min(app.buffer.width - 1, Math.ceil(c.x) | 0);\n  const yMin = Math.max(0, Math.floor(c.y) | 0);\n  const yMax = Math.min(app.buffer.height - 1, Math.ceil(c.y) | 0);\n  const pix = app.buffer.pixels; const w = app.buffer.width;\n  for (let y = yMin; y <= yMax; y++) {\n    const dy = y - c.y; const dy2 = dy * dy;\n    let idx = ((y * w + xMin) | 0) * 4;\n    for (let x = xMin; x <= xMax; x++, idx += 4) {\n      const dx = x - c.x;\n      if (dx * dx + dy2 <= r2) {\n        const dr = pix[idx], dg = pix[idx + 1], db = pix[idx + 2], da = pix[idx + 3];\n        const [r0, g0, b0, a0] = blendRGBA(dr, dg, db, da, color[0], color[1], color[2], color[3]);\n        pix[idx] = (r0 + 0.5) | 0; pix[idx + 1] = (g0 + 0.5) | 0; pix[idx + 2] = (b0 + 0.5) | 0; pix[idx + 3] = (a0 + 0.5) | 0;\n      }\n    }\n  }\n}\n\n/** Scanline polygon fill (Active Edge Table). `points` in CANVAS space */\nexport function fillPolygon(app: CanvasRenderer, points: V2[], color: Readonly<[number, number, number, number]>): void {\n  const n = points?.length | 0; if (n < 3) return;\n  const h = app.buffer.height | 0, w = app.buffer.width | 0;\n  let minY = Infinity, maxY = -Infinity;\n  const edges: Array<{ ymin: number; ymax: number; x: number; invSlope: number }> = [];\n  for (let i = 0; i < n; i++) {\n    const p1 = points[i], p2 = points[(i + 1) % n];\n    const x1 = p1.x, y1 = p1.y, x2 = p2.x, y2 = p2.y;\n    if (y1 === y2) continue; // skip horizontals\n    const ymin = Math.min(y1, y2), ymax = Math.max(y1, y2);\n    const xAtYmin = y1 < y2 ? x1 : x2;\n    const invSlope = (x2 - x1) / (y2 - y1);\n    edges.push({ ymin, ymax, x: xAtYmin, invSlope });\n    if (ymin < minY) minY = ymin; if (ymax > maxY) maxY = ymax;\n  }\n  minY = Math.max(0, Math.floor(minY) | 0);\n  maxY = Math.min(h - 1, Math.ceil(maxY) | 0);\n\n  const pix = app.buffer.pixels;\n  for (let y = minY; y <= maxY; y++) {\n    const crossings: number[] = [];\n    for (const e of edges) if (y >= e.ymin && y < e.ymax) crossings.push(e.x + (y - e.ymin) * e.invSlope);\n    if (!crossings.length) continue;\n    crossings.sort((a, b) => a - b);\n    for (let k = 0; k < crossings.length; k += 2) {\n      const xStart = Math.max(0, Math.floor(crossings[k]) | 0);\n      const xEnd = Math.min(w - 1, Math.ceil(crossings[k + 1]) | 0);\n      let idx = ((y * w + xStart) | 0) * 4;\n      for (let x = xStart; x <= xEnd; x++, idx += 4) {\n        const dr = pix[idx], dg = pix[idx + 1], db = pix[idx + 2], da = pix[idx + 3];\n        const [r0, g0, b0, a0] = blendRGBA(dr, dg, db, da, color[0], color[1], color[2], color[3]);\n        pix[idx] = (r0 + 0.5) | 0; pix[idx + 1] = (g0 + 0.5) | 0; pix[idx + 2] = (b0 + 0.5) | 0; pix[idx + 3] = (a0 + 0.5) | 0;\n      }\n    }\n  }\n}\n\nexport const drawLine = (app: CanvasRenderer, p0: V2, p1: V2, color: Readonly<[number, number, number, number]>, width: number = 1): void => strokeShape(app, [p0, p1], color, width);\n\nexport function drawCircleOutline(app: CanvasRenderer, c: V2, r: number, color: Readonly<[number, number, number, number]>, width: number = 1, segments: number = 32): void {\n  const pts: V2[] = [];\n  for (let i = 0; i < segments; i++) { const t = (i / segments) * Math.PI * 2; pts.push(new V2(c.x + r * Math.cos(t), c.y + r * Math.sin(t))); }\n  strokeShape(app, pts, color, width);\n}\n", "// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/graph.ts\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { V2 } from \"./v2\";\nimport { ViewportManager, getDrawableBounds } from \"./viewport\";\nimport { parseColor } from \"./color\";\nimport type { RGBA } from \"./types\";\nimport { drawLine } from \"./raster\";\n\nfunction decimalsForStep(step: number): number {\n  if (!isFinite(step) || step <= 0) return 0;\n  const s = Math.abs(step);\n  if (s >= 1) return 0;\n  return Math.min(6, Math.ceil(-Math.log10(s)));\n}\n\nfunction fmtTick(x: number, decimals: number): string {\n  const n = +x.toFixed(decimals);\n  const z = Math.abs(n) < 1e-12 ? 0 : n;\n  return z.toFixed(decimals);\n}\n\nexport interface GraphOptions {\n  showGrid?: boolean;\n  showAxes?: boolean;\n  showTicks?: boolean;\n  drawBorder?: boolean;\n  axisAtZero?: boolean;\n  gridColor?: string;\n  axisColor?: string;\n  borderColor?: string;\n  tickSizePx?: number;\n  tickThickness?: number;\n  axisThickness?: number;\n  font?: string;\n  textColor?: string;\n  margin?: number;\n  labelOffset?: number;\n  numTicksX?: number;\n  numTicksY?: number;\n  autoScale?: boolean;\n}\n\nexport class Graph {\n  public showGrid: boolean;\n  public showAxes: boolean;\n  public showTicks: boolean;\n  public drawBorder: boolean;\n  public axisAtZero: boolean;\n\n  public gridColor: RGBA;\n  public axisColor: RGBA;\n  public borderColor: RGBA;\n\n  public tickSizePx: number;\n  public tickThickness: number;\n  public axisThickness: number;\n  public font: string;\n  public textColor: string;\n  public margin: number;\n  public labelOffset: number;\n\n  public numTicksX: number;\n  public numTicksY: number;\n  public autoScale: boolean;\n\n  public axisXPos: number;\n  public axisYPos: number;\n\n  constructor(public vp: ViewportManager, options: GraphOptions = {}) {\n    this.showGrid = options.showGrid !== false;\n    this.showAxes = options.showAxes !== false;\n    this.showTicks = options.showTicks !== false;\n    this.drawBorder = options.drawBorder || false;\n    this.axisAtZero = options.axisAtZero !== false;\n\n    this.gridColor = parseColor(options.gridColor || \"#2a2a2a\")!;\n    this.axisColor = parseColor(options.axisColor || \"#888\")!;\n    this.borderColor = parseColor(options.borderColor || \"#555\")!;\n\n    this.tickSizePx = options.tickSizePx ?? 6;\n    this.tickThickness = options.tickThickness ?? 1;\n    this.axisThickness = options.axisThickness ?? 2;\n    this.font = options.font || \"12px sans-serif\";\n    this.textColor = options.textColor || \"#fff\";\n    this.margin = options.margin ?? 30;\n    this.labelOffset = options.labelOffset ?? 10;\n\n    this.numTicksX = options.numTicksX ?? 5;\n    this.numTicksY = options.numTicksY ?? 5;\n    this.autoScale = options.autoScale ?? false;\n\n    this.axisXPos = 0;\n    this.axisYPos = 0;\n  }\n\n  public setAxisPosition(x: number, y: number) {\n    this.axisXPos = x;\n    this.axisYPos = y;\n  }\n\n  public setLabelStyle(font: string, color: string, offset?: number) {\n    this.font = font;\n    this.textColor = color;\n    if (offset !== undefined) this.labelOffset = offset;\n  }\n\n  private computeTicks(min: number, max: number, n: number): number[] {\n    if (!isFinite(min) || !isFinite(max) || n <= 0) return [];\n    const range = max - min;\n    if (range === 0) return [min];\n\n    const stepRaw = range / n;\n    const magnitude = Math.pow(10, Math.floor(Math.log10(stepRaw)));\n    const step = Math.ceil(stepRaw / magnitude) * magnitude;\n\n    const first = Math.ceil(min / step) * step;\n    const ticks: number[] = [];\n    for (let x = first; x <= max + 1e-12; x += step) {\n      ticks.push(+x.toFixed(6));\n    }\n    return ticks;\n  }\n\n  private autoScaleTicks() {\n    if (!this.autoScale) return;\n\n    const world = this.vp.worldBounds;\n    const xRange = Math.abs(world.xMax - world.xMin);\n    const yRange = Math.abs(world.yMax - world.yMin);\n\n    if (xRange > 0) this.numTicksX = Math.max(2, Math.floor(this.vp.viewport.width / 80));\n    if (yRange > 0) this.numTicksY = Math.max(2, Math.floor(this.vp.viewport.height / 80));\n  }\n\n  /**\n   * Automatically scale the Graph to fit the given drawables.\n   * Delegates scaling to the ViewportManager.\n   */\n  public autoScaleToDrawables(drawables: any[], padding: number = 0.05) {\n    const boundsArr = drawables.map(getDrawableBounds).filter(b => b != null);\n    if (!boundsArr.length) return;\n    this.vp.fitToBounds(boundsArr, padding);\n  }\n\n  draw(app: { drawText: (...args: any[]) => void }): void {\n    const vpRect = this.vp.viewport;\n    const world = this.vp.worldBounds;\n    if (!vpRect || !world) return;\n\n    if (this.autoScale) {\n      this.autoScaleTicks();\n    }\n\n    const xTicks = this.computeTicks(world.xMin, world.xMax, this.numTicksX);\n    const yTicks = this.computeTicks(world.yMin, world.yMax, this.numTicksY);\n\n    const decimalsX = decimalsForStep(xTicks.length > 1 ? Math.abs(xTicks[1] - xTicks[0]) : 1);\n    const decimalsY = decimalsForStep(yTicks.length > 1 ? Math.abs(yTicks[1] - yTicks[0]) : 1);\n\n    const drawX = this.axisAtZero && world.yMin <= 0 && world.yMax >= 0 ? this.axisXPos : world.yMin;\n    const drawY = this.axisAtZero && world.xMin <= 0 && world.xMax >= 0 ? this.axisYPos : world.xMin;\n\n    if (this.showGrid) {\n      for (const x of xTicks) {\n        const p0 = this.vp.worldToCanvas(x, world.yMin);\n        const p1 = this.vp.worldToCanvas(x, world.yMax);\n        drawLine(app as any, p0, p1, this.gridColor, 1);\n      }\n\n      for (const y of yTicks) {\n        const p0 = this.vp.worldToCanvas(world.xMin, y);\n        const p1 = this.vp.worldToCanvas(world.xMax, y);\n        drawLine(app as any, p0, p1, this.gridColor, 1);\n      }\n    }\n\n    if (this.showAxes) {\n      const x0 = this.vp.worldToCanvas(world.xMin, drawX);\n      const x1 = this.vp.worldToCanvas(world.xMax, drawX);\n      const y0 = this.vp.worldToCanvas(drawY, world.yMin);\n      const y1 = this.vp.worldToCanvas(drawY, world.yMax);\n\n      drawLine(app as any, x0, x1, this.axisColor, this.axisThickness);\n      drawLine(app as any, y0, y1, this.axisColor, this.axisThickness);\n    }\n\n    if (this.showTicks && this.tickSizePx > 0) {\n      const t = this.tickSizePx;\n\n      for (const x of xTicks) {\n        const canvasPos = this.vp.worldToCanvas(x, drawX);\n        drawLine(\n          app as any,\n          new V2(canvasPos.x, canvasPos.y - t / 2),\n          new V2(canvasPos.x, canvasPos.y + t / 2),\n          this.axisColor,\n          this.tickThickness\n        );\n        app.drawText(\n          fmtTick(x, decimalsX),\n          new V2(canvasPos.x, canvasPos.y + this.labelOffset),\n          this.textColor,\n          this.font,\n          \"center\",\n          \"top\"\n        );\n      }\n\n      for (const y of yTicks) {\n        const canvasPos = this.vp.worldToCanvas(drawY, y);\n        drawLine(\n          app as any,\n          new V2(canvasPos.x - t / 2, canvasPos.y),\n          new V2(canvasPos.x + t / 2, canvasPos.y),\n          this.axisColor,\n          this.tickThickness\n        );\n        app.drawText(\n          fmtTick(y, decimalsY),\n          new V2(canvasPos.x - this.labelOffset, canvasPos.y),\n          this.textColor,\n          this.font,\n          \"right\",\n          \"middle\"\n        );\n      }\n    }\n  }\n}", "// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/transform2d.ts\n// 2\u00D73 affine transform compatible with Canvas2D (a b c d e f)\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { V2 } from \"./v2\";\n\n/**\n * 2x3 affine: [ a c e ]\n *             [ b d f ]\n * maps (x,y) -> (a*x + c*y + e, b*x + d*y + f)\n */\nexport class Transform2D {\n  constructor(\n    public a: number = 1, public b: number = 0,\n    public c: number = 0, public d: number = 1,\n    public e: number = 0, public f: number = 0\n  ) {}\n\n  static identity(): Transform2D { return new Transform2D(); }\n  static translation(tx: number, ty: number): Transform2D { return new Transform2D(1, 0, 0, 1, tx, ty); }\n  static scale(sx: number, sy: number = sx): Transform2D { return new Transform2D(sx, 0, 0, sy, 0, 0); }\n  static rotation(angle: number): Transform2D {\n    const c = Math.cos(angle), s = Math.sin(angle);\n    return new Transform2D(c, s, -s, c, 0, 0);\n  }\n  static fromCanvasTransform(a: number, b: number, c: number, d: number, e: number, f: number): Transform2D {\n    return new Transform2D(a, b, c, d, e, f);\n  }\n\n  /** this \u2218 m (apply m first, then this) */\n  multiply(m: Transform2D): Transform2D {\n    return new Transform2D(\n      this.a * m.a + this.c * m.b,\n      this.b * m.a + this.d * m.b,\n      this.a * m.c + this.c * m.d,\n      this.b * m.c + this.d * m.d,\n      this.a * m.e + this.c * m.f + this.e,\n      this.b * m.e + this.d * m.f + this.f\n    );\n  }\n\n  transformV2(v: V2): V2 {\n    return new V2(\n      this.a * v.x + this.c * v.y + this.e,\n      this.b * v.x + this.d * v.y + this.f\n    );\n  }\n\n  /** Build a transform applied around a pivot: T(p) * mat * T(-p) */\n  static around(pivot: V2, mat: Transform2D): Transform2D {\n    return Transform2D.translation(pivot.x, pivot.y).multiply(mat).multiply(Transform2D.translation(-pivot.x, -pivot.y));\n  }\n}\n\n", "// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/drawables.ts\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { V2 } from \"./v2\";\nimport { Transform2D } from \"./transform2d\";\nimport {\n  drawLine,\n  fillCircle,\n  drawCircleOutline,\n  fillPolygon,\n  strokeShape,\n  rawPoint,\n} from \"./raster\";\nimport { parseColor } from \"./color\";\nimport { ViewportManager } from \"./viewport\";\n\nexport type LegendSymbol = \"line\" | \"marker\" | \"area\";\n\nexport interface LegendMetadata {\n  label: string;\n  color?: string;\n  symbol?: LegendSymbol;\n}\n\nexport abstract class Drawable {\n\n  public legend?: LegendMetadata;\n\n  constructor(\n    public color: string | readonly [number, number, number, number] = \"white\",\n    public fill: boolean = false,\n    public fillColor: string | readonly [number, number, number, number] | null = null,\n    public transform: Transform2D = Transform2D.identity(),\n    legend?: LegendMetadata\n  ) {\n    if (!this.fillColor) this.fillColor = color;\n    this.legend = legend;\n  }\n\n  /**\n   * Draw the shape.\n   * @param app - rendering backend (canvas wrapper)\n   * @param vp - viewport for coordinate transforms\n   */\n   abstract draw(app: any, vp?: ViewportManager): void;\n\n  protected parseColorSafe(\n    input: string | readonly [number, number, number, number]\n  ): [number, number, number, number] {\n    return [...(parseColor(input) ?? [255, 255, 255, 255])] as [\n      number,\n      number,\n      number,\n      number\n    ];\n  }\n}\n\nexport class DrawableFunction extends Drawable {\n  public baselineY: number;\n\n  constructor(\n    public data: V2[],\n    opts: {\n      color?: string;\n      fill?: boolean;\n      fillColor?: string;\n      baselineY?: number;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"red\",\n      opts.fill ?? false,\n      opts.fillColor ?? \"rgba(255,0,0,0.3)\",\n      Transform2D.identity(),\n      opts.legend\n    );\n    this.baselineY = opts.baselineY ?? 0;\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    if (!this.data?.length) return;\n\n    let pPrev = vp.worldToCanvas(this.data[0].x, this.data[0].y);\n    const col = this.parseColorSafe(this.color!);\n\n    for (let i = 1; i < this.data.length; i++) {\n      const pNext = vp.worldToCanvas(this.data[i].x, this.data[i].y);\n      drawLine(app, pPrev, pNext, col);\n      pPrev = pNext;\n    }\n\n    if (!this.fill) return;\n\n    const pts = this.data.map((p) => vp.worldToCanvas(p.x, p.y));\n    const last = this.data[this.data.length - 1];\n    const first = this.data[0];\n    pts.push(vp.worldToCanvas(last.x, this.baselineY));\n    pts.push(vp.worldToCanvas(first.x, this.baselineY));\n    fillPolygon(app, pts, this.parseColorSafe(this.fillColor!));\n  }\n}\n\nexport class DrawableCircle extends Drawable {\n  constructor(\n    public center: V2 = new V2(0, 0),\n    public radius: number = 1,\n    opts: {\n      color?: string;\n      fill?: boolean;\n      fillColor?: string;\n      transform?: Transform2D;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"white\",\n      opts.fill ?? false,\n      opts.fillColor ?? null,\n      opts.transform ?? Transform2D.identity(),\n      opts.legend\n    );\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const cWorld = this.transform.transformV2(this.center);\n    const c = vp.worldToCanvas(cWorld.x, cWorld.y);\n    const sc = vp.scale;\n    const r = this.radius * (vp.preserveAspect ? sc.x : (sc.x + sc.y) * 0.5);\n\n    if (this.fill) fillCircle(app, c, r, this.parseColorSafe(this.fillColor!));\n    drawCircleOutline(app, c, r, this.parseColorSafe(this.color!));\n  }\n}\n\nexport class DrawableLine extends Drawable {\n  public width: number;\n\n  constructor(\n    public p1: V2,\n    public p2: V2,\n    opts: {\n      color?: string;\n      width?: number;\n      transform?: Transform2D;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"yellow\",\n      false,\n      null,\n      opts.transform ?? Transform2D.identity(),\n      opts.legend\n    );\n    this.width = Math.max(1, (opts.width ?? 2) | 0);\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const a = this.transform.transformV2(this.p1);\n    const b = this.transform.transformV2(this.p2);\n    const p0 = vp.worldToCanvas(a.x, a.y);\n    const p1 = vp.worldToCanvas(b.x, b.y);\n    strokeShape(app, [p0, p1], this.parseColorSafe(this.color!), this.width);\n  }\n}\n\nexport class DrawablePoint extends Drawable {\n  public type: \"circle\" | \"cross\" | \"square\";\n  public size: number;\n\n  constructor(\n    public pos: V2,\n    opts: {\n      color?: string;\n      type?: \"circle\" | \"cross\" | \"square\";\n      size?: number;\n      transform?: Transform2D;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"white\",\n      false,\n      null,\n      opts.transform ?? Transform2D.identity(),\n      opts.legend\n    );\n    this.type = opts.type ?? \"circle\";\n    this.size = opts.size ?? 3;\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const pWorld = this.transform.transformV2(this.pos);\n    const c = vp.worldToCanvas(pWorld.x, pWorld.y);\n    rawPoint(app, c, this.parseColorSafe(this.color!), {\n      type: this.type,\n      size: this.size,\n    });\n  }\n}\n\nexport class DrawableTriangle extends Drawable {\n  public points: [V2, V2, V2];\n\n  constructor(\n    p1: V2,\n    p2: V2,\n    p3: V2,\n    opts: {\n      color?: string;\n      fill?: boolean;\n      fillColor?: string;\n      transform?: Transform2D;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"yellow\",\n      opts.fill ?? true,\n      opts.fillColor ?? \"rgba(255,255,0,0.5)\",\n      opts.transform ?? Transform2D.identity(),\n      opts.legend\n    );\n    this.points = [p1, p2, p3];\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const tp = this.points.map((p) => this.transform.transformV2(p));\n    const pts = tp.map((p) => vp.worldToCanvas(p.x, p.y));\n\n    if (this.fill) fillPolygon(app, pts, this.parseColorSafe(this.fillColor!));\n    for (let i = 0; i < 3; i++) {\n      drawLine(app, pts[i], pts[(i + 1) % 3], this.parseColorSafe(this.color!));\n    }\n  }\n}\n\nexport class DrawableText extends Drawable {\n  public font: string;\n  public align: CanvasTextAlign;\n  public baseline: CanvasTextBaseline;\n\n  constructor(\n    public text: string,\n    public pos: V2,\n    opts: {\n      color?: string;\n      font?: string;\n      align?: CanvasTextAlign;\n      baseline?: CanvasTextBaseline;\n      transform?: Transform2D;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"white\",\n      false,\n      null,\n      opts.transform ?? Transform2D.identity(),\n      opts.legend\n    );\n    this.font = opts.font ?? \"14px sans-serif\";\n    this.align = opts.align ?? \"left\";\n    this.baseline = opts.baseline ?? \"alphabetic\";\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const pWorld = this.transform.transformV2(this.pos);\n    const p = vp.worldToCanvas(pWorld.x, pWorld.y);\n    (app as any).drawText(\n      this.text,\n      p,\n      this.color as string,\n      this.font,\n      this.align,\n      this.baseline\n    );\n  }\n}\n\nexport class DrawableLabel extends Drawable {\n  public mode: \"world\" | \"canvas\";\n  public font: string;\n  public align: CanvasTextAlign;\n  public baseline: CanvasTextBaseline;\n\n  constructor(\n    public text: string,\n    public pos: V2,\n    opts: {\n      mode?: \"world\" | \"canvas\";\n      color?: string;\n      font?: string;\n      align?: CanvasTextAlign;\n      baseline?: CanvasTextBaseline;\n      transform?: Transform2D;\n      legend?: LegendMetadata;\n    } = {}\n  ) {\n    super(\n      opts.color ?? \"white\",\n      false,\n      null,\n      opts.transform ?? Transform2D.identity(),\n      opts.legend\n    );\n    this.mode = opts.mode ?? \"world\";\n    this.font = opts.font ?? \"14px sans-serif\";\n    this.align = opts.align ?? \"left\";\n    this.baseline = opts.baseline ?? \"alphabetic\";\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const p =\n      this.mode === \"canvas\"\n        ? this.pos\n        : vp.worldToCanvas(\n            this.transform.transformV2(this.pos).x,\n            this.transform.transformV2(this.pos).y\n          );\n    (app as any).drawText(\n      this.text,\n      p,\n      this.color as string,\n      this.font,\n      this.align,\n      this.baseline\n    );\n  }\n}\n", "\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/pixelbuffer.ts\n// A CPU-side pixel buffer backed by ImageData, with blending puts and blits\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { NAMED, parseColor, packABGR, blendRGBA } from \"./color\";\n\nexport class PixelBuffer {\n  public width = 0;\n  public height = 0;\n  public imageData: ImageData;\n  public pixels: Uint8ClampedArray; // RGBA view\n  public px32: Uint32Array;         // ABGR packed view\n\n  constructor(width: number, height: number) {\n    this.imageData = new ImageData(Math.max(1, width | 0), Math.max(1, height | 0));\n    this.pixels = this.imageData.data;\n    this.px32 = new Uint32Array(this.pixels.buffer);\n    this.width = this.imageData.width;\n    this.height = this.imageData.height;\n  }\n\n  resize(width: number, height: number): void {\n    this.imageData = new ImageData(Math.max(1, width | 0), Math.max(1, height | 0));\n    this.pixels = this.imageData.data;\n    this.px32 = new Uint32Array(this.pixels.buffer);\n    this.width = this.imageData.width;\n    this.height = this.imageData.height;\n  }\n\n  clear(color: string = \"#131313\"): void {\n    const c = parseColor(color) || NAMED.black;\n    const packed = packABGR(c[0], c[1], c[2], c[3]);\n    this.px32.fill(packed);\n  }\n\n  private index(x: number, y: number): number { return ((y * this.width + x) | 0) * 4; }\n\n  putPixel(x: number, y: number, color: Readonly<[number, number, number, number]>): void {\n    if (x >>> 0 >= this.width >>> 0 || y >>> 0 >= this.height >>> 0) return;\n    const i = this.index(x | 0, y | 0);\n    const c = color;\n    this.pixels[i] = c[0]; this.pixels[i + 1] = c[1]; this.pixels[i + 2] = c[2]; this.pixels[i + 3] = c[3];\n  }\n\n  putPixelBlend(x: number, y: number, color: Readonly<[number, number, number, number]>): void {\n    if (x >>> 0 >= this.width >>> 0 || y >>> 0 >= this.height >>> 0) return;\n    const i = this.index(x | 0, y | 0);\n    const dr = this.pixels[i], dg = this.pixels[i + 1], db = this.pixels[i + 2], da = this.pixels[i + 3];\n    const [r, g, b, a] = blendRGBA(dr, dg, db, da, color[0], color[1], color[2], color[3]);\n    this.pixels[i] = (r + 0.5) | 0; this.pixels[i + 1] = (g + 0.5) | 0; this.pixels[i + 2] = (b + 0.5) | 0; this.pixels[i + 3] = (a + 0.5) | 0;\n  }\n\n  /** Alpha-blit ImageData into this buffer at (dx,dy). */\n  blit(srcImageData: ImageData, dx: number, dy: number): void {\n    const sw = srcImageData.width | 0, sh = srcImageData.height | 0;\n    const src = srcImageData.data;\n    const w = this.width, h = this.height;\n    dx |= 0; dy |= 0;\n\n    const startX = Math.max(0, dx);\n    const startY = Math.max(0, dy);\n    const endX = Math.min(w, dx + sw);\n    const endY = Math.min(h, dy + sh);\n\n    for (let sy = startY - dy; sy < endY - dy; sy++) {\n      const ty = dy + sy;\n      const rowOff = ty * w;\n      for (let sx = startX - dx; sx < endX - dx; sx++) {\n        const tx = dx + sx;\n        const sIdx = (sy * sw + sx) * 4;\n        const dIdx = (rowOff + tx) * 4;\n\n        const dr = this.pixels[dIdx], dg = this.pixels[dIdx + 1], db = this.pixels[dIdx + 2], da = this.pixels[dIdx + 3];\n        const sr = src[sIdx], sg = src[sIdx + 1], sb = src[sIdx + 2], sa = src[sIdx + 3];\n        const alpha = sa / 255;\n        const invAlpha = 1 - alpha;\n\n        this.pixels[dIdx]     = (sr * alpha + dr * invAlpha + 0.5) | 0;\n        this.pixels[dIdx + 1] = (sg * alpha + dg * invAlpha + 0.5) | 0;\n        this.pixels[dIdx + 2] = (sb * alpha + db * invAlpha + 0.5) | 0;\n        this.pixels[dIdx + 3] = (sa * alpha + da * invAlpha + 0.5) | 0;\n      }\n    }\n  }\n}\n\n", "\n\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/textCache.ts\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nexport class TextCache {\n    private map = new Map<string, ImageData>();\n    constructor(public capacity: number = 256) { this.capacity |= 0; }\n\n    get(key: string): ImageData | null {\n        const v = this.map.get(key);\n        if (v) { this.map.delete(key); this.map.set(key, v); }\n        return v ?? null;\n    }\n\n    set(key: string, value: ImageData): void {\n        if (this.map.has(key)) this.map.delete(key);\n        this.map.set(key, value);\n        while (this.map.size > this.capacity) {\n            const firstKey = this.map.keys().next().value;\n            if (firstKey !== undefined) {\n                this.map.delete(firstKey);\n            }\n        }\n    }\n\n    clear(): void { this.map.clear(); }\n}\n", "// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/renderer.ts\n// DOM canvas \u2190\u2192 PixelBuffer bridge\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { V2 } from \"./v2\";\nimport { PixelBuffer } from \"./pixelbuffer\";\nimport { TextCache } from \"./textCache\";\n\nexport class CanvasRenderer {\n  public ctx: CanvasRenderingContext2D;\n  public size: V2;\n  public buffer: PixelBuffer;\n  private textCanvas: HTMLCanvasElement;\n  private textCtx: CanvasRenderingContext2D;\n  private textCache: TextCache;\n  public renderables: Array<{ draw: (app: CanvasRenderer) => void }> = [];\n\n  constructor(public canvas: HTMLCanvasElement) {\n    this.ctx = canvas.getContext(\"2d\")!;\n    this.size = new V2(canvas.width, canvas.height);\n    this.buffer = new PixelBuffer(this.size.x, this.size.y);\n\n    this.textCanvas = document.createElement(\"canvas\");\n    this.textCtx = this.textCanvas.getContext(\"2d\")!;\n    this.textCache = new TextCache(512);\n  }\n\n  addRenderable(obj: { draw: (app: CanvasRenderer) => void }): void {\n    this.renderables.push(obj);\n  }\n\n  clear(color: string = \"#131313\"): void {\n    this.buffer.clear(color);\n  }\n\n  putPixel(p: V2, color: Readonly<[number, number, number, number]>): void {\n    this.buffer.putPixel(p.x | 0, p.y | 0, color);\n  }\n\n  putPixelBlend(p: V2, color: Readonly<[number, number, number, number]>): void {\n    this.buffer.putPixelBlend(p.x | 0, p.y | 0, color);\n  }\n\n  blitImageData(img: ImageData, dx: number, dy: number): void {\n    this.buffer.blit(img, dx, dy);\n  }\n\n  render(): void {\n    this.ctx.putImageData(this.buffer.imageData, 0, 0);\n  }\n\n  renderAll(): void {\n    this.clear();\n    this.renderables.forEach(obj => obj.draw(this));\n    this.render();\n  }\n\n  drawText(\n    text: string,\n    pos: V2,\n    color: string = \"#fff\",\n    font: string = \"12px sans-serif\",\n    align: CanvasTextAlign = \"left\",\n    baseline: CanvasTextBaseline = \"alphabetic\"\n  ): void {\n    const key = `${text}|${font}|${color}`;\n    let entry = this.textCache.get(key);\n\n    if (!entry) {\n      const ctx = this.textCtx;\n      ctx.font = font;\n      const metrics = ctx.measureText(text);\n      const w = Math.ceil(metrics.width + 4);\n      const h = Math.ceil(\n        (metrics.actualBoundingBoxAscent || 10) +\n        (metrics.actualBoundingBoxDescent || 4) + 4\n      );\n      if (this.textCanvas.width < w || this.textCanvas.height < h) {\n        this.textCanvas.width = w;\n        this.textCanvas.height = h;\n      }\n      ctx.clearRect(0, 0, w, h);\n      ctx.font = font;\n      ctx.fillStyle = color;\n      ctx.textBaseline = \"top\";\n      ctx.textAlign = \"left\";\n      ctx.fillText(text, 2, 2);\n      entry = ctx.getImageData(0, 0, w, h);\n      this.textCache.set(key, entry);\n    }\n\n    const { width: tw, height: th } = entry;\n    let ox = 0, oy = 0;\n    if (align === \"center\") ox = -tw / 2;\n    else if (align === \"right\" || align === \"end\") ox = -tw;\n    if (baseline === \"middle\") oy = -th / 2;\n    else if (baseline === \"bottom\" || baseline === \"ideographic\" || baseline === \"alphabetic\") oy = -th;\n\n    this.blitImageData(entry, (pos.x + ox + 0.5) | 0, (pos.y + oy + 0.5) | 0);\n  }\n}\n\nexport class DynamicCanvasRenderer {\n  public app: CanvasRenderer;\n  private canvas: HTMLCanvasElement;\n\n  constructor(\n    public containerDiv: HTMLElement,\n    options: { background?: string } = {}\n  ) {\n    this.canvas = document.createElement(\"canvas\");\n    containerDiv.appendChild(this.canvas);\n    Object.assign(this.canvas.style, {\n      width: \"100%\",\n      height: \"100%\",\n      display: \"block\",\n      background: options.background || \"black\"\n    });\n\n    this.app = new CanvasRenderer(this.canvas);\n    this.resize(); // initialize\n    window.addEventListener(\"resize\", () => this.resize());\n  }\n\n  resize(): void {\n    const rect = this.containerDiv.getBoundingClientRect();\n    const dpr = window.devicePixelRatio || 1;\n    const w = Math.max(1, rect.width | 0);\n    const h = Math.max(1, rect.height | 0);\n\n    this.canvas.width = w * dpr;\n    this.canvas.height = h * dpr;\n\n    this.app.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.app.ctx.scale(dpr, dpr);\n\n    this.app.size = new V2(w, h);\n    this.app.buffer.resize(w, h);\n  }\n\n  clear(): void { this.app.clear(); }\n  render(): void { this.app.render(); }\n}\n", "\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n// File: src/tools.ts\n// \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nimport { V2 } from \"./v2\";\nimport { Transform2D } from \"./transform2d\";\nimport { fillCircle } from \"./raster\";\nimport { parseColor, NAMED } from \"./color\";\nimport { ViewportManager } from \"./viewport\";\n\nexport function rotatePoint(p: V2, center: V2, angle: number): V2 { return p.rotate(angle, center); }\n\nexport function rotateTriangleAroundCenter(tri: { points: V2[] }, center: V2, angle: number): void {\n  tri.points = tri.points.map(p => rotatePoint(p, center, angle));\n}\n\nexport function rotateTriangleVertical(tri: { points: V2[] }, center: V2, angle: number): void {\n  const m = Transform2D.around(center, Transform2D.scale(Math.cos(angle), 1));\n  tri.points = tri.points.map(p => m.transformV2(p));\n}\n\n/** 2.5D projection: keep Y, scale X by cos(angle) about `center`. */\nexport function projectYRotation(point: V2, center: V2, angle: number): V2 {\n  const m = Transform2D.around(center, Transform2D.scale(Math.cos(angle), 1));\n  return m.transformV2(point);\n}\n\nexport class Intercepts {\n  static findX(series: V2[]): number[] {\n    const out: number[] = [];\n    for (let i = 1; i < series.length; i++) {\n      const y1 = series[i - 1].y, y2 = series[i].y;\n      if (y1 === 0) out.push(series[i - 1].x);\n      else if (y1 * y2 < 0) { const x1 = series[i - 1].x, x2 = series[i].x; out.push(x1 + (-y1 / (y2 - y1)) * (x2 - x1)); }\n    }\n    return out;\n  }\n  static drawX(app: any, vp: ViewportManager, series: V2[], color = \"yellow\") {\n    const col = parseColor(color) || NAMED.yellow;\n    const xs = Intercepts.findX(series);\n    for (const x of xs) {\n      const p = vp.worldToCanvas(x, 0);\n      fillCircle(app, new V2((p.x + 0.5) | 0, (p.y + 0.5) | 0), 5, col);\n    }\n  }\n\n}\n", "// src/scene.ts\nimport { Drawable } from \"./drawables\";\nimport { ViewportManager } from \"./viewport\";\nimport { CanvasRenderer } from \"./renderer\";\nimport { LegendItem } from \"./legend\";\n\ninterface Layer {\n    name: string;\n    drawables: Drawable[];\n}\n\nexport class Scene {\n    private layers: Layer[] = [];\n\n    add(items: Drawable | Drawable[], layerName: string = \"default\"): this {\n        const drawables = Array.isArray(items) ? items : [items];\n        let layer = this.layers.find(l => l.name === layerName);\n\n        if (!layer) {\n            layer = { name: layerName, drawables: [] };\n            this.layers.push(layer);\n            this.sortLayers();\n        }\n\n        layer.drawables.push(...drawables);\n        return this;\n    }\n\n    remove(item: Drawable): this {\n        for (const layer of this.layers) {\n            layer.drawables = layer.drawables.filter(d => d !== item);\n        }\n        return this;\n    }\n\n    clear(layerName?: string): this {\n        if (layerName) {\n            const layer = this.layers.find(l => l.name === layerName);\n            if (layer) layer.drawables.length = 0;\n        } else {\n            this.layers.length = 0;\n        }\n        return this;\n    }\n\n    draw(app: CanvasRenderer, vp?: ViewportManager): void {\n        for (const layer of this.layers) {\n            if (layer.name === \"debug\") continue;\n            for (const d of layer.drawables) {\n                if ((d as any).visible === false) continue;\n                d.draw(app, vp);\n            }\n        }\n\n        const debugLayer = this.layers.find(l => l.name === \"debug\");\n        if (debugLayer) {\n            for (const d of debugLayer.drawables) {\n                if ((d as any).visible === false) continue;\n                if ((d as any).ignoreViewport) d.draw(app, undefined);\n                else d.draw(app, vp);\n            }\n        }\n    }\n\n    collectDrawables(): Drawable[] {\n        const drawables: Drawable[] = [];\n        for (const layer of this.layers) { \n            drawables.push(...layer.drawables);\n        }\n        return drawables;\n    }\n\n    collectLegend(): LegendItem[] {\n        const items: LegendItem[] = [];\n        for (const layer of this.layers) {\n            for (const d of layer.drawables) {\n                const meta = (d as any).legend;\n                if (meta) {\n                    items.push({\n                        label: meta.label,\n                        color: meta.color ?? (d as any).color ?? \"#fff\",\n                        symbol: meta.symbol ?? \"line\",\n                    });\n                }\n            }\n        }\n        return items;\n    }\n\n    private sortLayers(): void {\n        this.layers.sort((a, b) => {\n            if (a.name === \"debug\") return 1;\n            if (b.name === \"debug\") return -1;\n            return a.name.localeCompare(b.name);\n        });\n    }\n}\n\nexport interface CanvasHost {\n    app: CanvasRenderer;\n    resize?: () => void;\n    clear?: () => void;\n    render?: () => void;\n    containerDiv?: HTMLElement;\n}\n\nexport interface SceneEntry {\n    host: CanvasHost;\n    scene: Scene;\n    vp?: ViewportManager;\n    id?: string;\n}\n\nexport class SceneManager {\n    private entries: SceneEntry[] = [];\n    private _rafId: number | null = null;\n\n    add(host: CanvasHost, scene: Scene, vp?: ViewportManager, id?: string): this {\n        this.entries.push({ host, scene, vp, id });\n        return this;\n    }\n\n    init(): void {\n        this.entries.forEach(({ host, vp }) => {\n            host.resize?.();\n            if (vp?.updateWorld) {\n                try {\n                    vp.updateWorld(vp.worldBounds);\n                } catch (e) {\n                    console.warn(\"Could not update viewport:\", e);\n                }\n            }\n        });\n    }\n\n    resizeAll(): void {\n        this.entries.forEach(({ host, vp }) => {\n            host.resize?.();\n            if (vp?.updateWorld) {\n                try {\n                    vp.updateWorld(vp.worldBounds);\n                } catch {}\n            }\n        });\n    }\n\n    renderAll(): void {\n        this.entries.forEach(({ host, scene, vp }) => {\n            host.clear?.();\n            scene.draw(host.app, vp);\n            host.render?.();\n        });\n    }\n\n    startLoop(onFrame?: (t: number) => void): void {\n        if (this._rafId != null) return;\n        const loop = (t: number) => {\n            onFrame?.(t);\n            this.renderAll();\n            this._rafId = requestAnimationFrame(loop);\n        };\n        this._rafId = requestAnimationFrame(loop);\n    }\n\n    stopLoop(): void {\n        if (this._rafId != null) {\n            cancelAnimationFrame(this._rafId);\n            this._rafId = null;\n        }\n    }\n\n    get(id: string): SceneEntry | undefined {\n        return this.entries.find(entry => entry.id === id);\n    }\n\n    attachWindowResize(debounceMs: number = 120): void {\n        let timer: number | null = null;\n        window.addEventListener(\"resize\", () => {\n            if (timer != null) window.clearTimeout(timer);\n            timer = window.setTimeout(() => {\n                this.resizeAll();\n                timer = null;\n            }, debounceMs);\n        });\n    }\n}\n", "// src/DebugUI.ts\nimport { Drawable } from \"./drawables\";\nimport { CanvasRenderer } from \"./renderer\";\nimport { V2 } from \"./v2\";\n\nclass UILabel {\n    constructor(\n        public text: string,\n        public pos: V2,\n        public color: string = \"#fff\",\n        public font: string = \"16px monospace\"\n    ) { }\n\n    draw(renderer: CanvasRenderer, margin: number = 2) {\n        const safePos = new V2(this.pos.x + margin, this.pos.y + margin);\n        renderer.drawText(this.text, safePos, this.color, this.font, \"left\", \"top\");\n    }\n}\n\nexport class DebugUI extends Drawable {\n    public elements: UILabel[] = [];\n    private lastTime: number = performance.now();\n    public visible: boolean = true;\n    public ignoreViewport = true; // important\n    private static registry: DebugUI[] = [];\n    private readonly margin: number;\n\n    constructor(pos: V2 = new V2(10, 10), margin: number = 2) {\n        super(\"white\", false, null);\n        this.margin = margin;\n        const fps = new UILabel(\"FPS: 0\", pos);\n        this.elements.push(fps);\n\n        DebugUI.registry.push(this);\n    }\n\n    update() {\n        const now = performance.now();\n        const dt = now - this.lastTime;\n        const fps = dt > 0 ? Math.round(1000 / dt) : 0;\n        this.elements[0].text = `FPS: ${fps}`;\n        this.lastTime = now;\n    }\n\n    draw(app: CanvasRenderer) {\n        if (!this.visible) return;\n        for (const el of this.elements) {\n            el.draw(app, this.margin);\n        }\n    }\n\n    static updateAll() {\n        for (const ui of DebugUI.registry) ui.update();\n    }\n}\n", "// src/legend.ts\nimport { V2 } from \"./v2\";\nimport { ViewportManager } from \"./viewport\";\nimport { fillCircle, drawLine, fillPolygon } from \"./raster\";\nimport { parseColor } from \"./color\";\nimport { Drawable } from \"./drawables\";\n\nexport type LegendSymbol = \"line\" | \"marker\" | \"area\";\nexport interface LegendItem {\n  label: string;\n  color: string;\n  symbol?: LegendSymbol;\n}\n\nexport interface LegendOptions {\n  anchor?: \"ne\" | \"nw\" | \"se\" | \"sw\";\n  padding?: number;\n  gap?: number;\n  swatchSize?: number;\n  font?: string;\n  textColor?: string;\n  background?: string | null;\n  boxOffset?: V2;\n  maxWidthPx?: number;\n}\n\nexport class DrawableLegend extends Drawable {\n  constructor(\n    public items: LegendItem[],\n    public options: LegendOptions = {}\n  ) {\n    super(\"white\", false, null);\n  }\n\n  private estimateTextWidth(label: string, font: string): number {\n    const m = /(\\d+)\\s*px/.exec(font);\n    const px = m ? parseInt(m[1], 10) : 12;\n    return Math.max(8, Math.round(label.length * px * 0.6));\n  }\n\n  draw(app: any, vp: ViewportManager): void {\n    const opts: Required<LegendOptions> = {\n      anchor: this.options.anchor ?? \"ne\",\n      padding: this.options.padding ?? 8,\n      gap: this.options.gap ?? 6,\n      swatchSize: this.options.swatchSize ?? 14,\n      font: this.options.font ?? \"12px sans-serif\",\n      textColor: this.options.textColor ?? \"#fff\",\n      background: (this.options.background === undefined ? \"rgba(0,0,0,0.35)\" : this.options.background) as any,\n      boxOffset: this.options.boxOffset ?? new V2(0, 0),\n      maxWidthPx: this.options.maxWidthPx ?? 0\n    };\n\n    if (!this.items?.length) return;\n\n    const vpRect = vp.viewport;\n    const pad = opts.padding;\n    const sw = opts.swatchSize;\n    const rowH = Math.max(sw, 12) + opts.gap;\n\n    let textW = 0;\n    for (const it of this.items) {\n      textW = Math.max(textW, this.estimateTextWidth(it.label, opts.font));\n    }\n    const contentW = sw + 6 + textW;\n    const boxW = (opts.maxWidthPx && opts.maxWidthPx > contentW ? opts.maxWidthPx : contentW) + pad * 2;\n    const boxH = this.items.length * rowH - opts.gap + pad * 2;\n\n    let x = 0, y = 0;\n    switch (opts.anchor) {\n      case \"ne\":\n        x = vpRect.x + vpRect.width - boxW - 4; y = vpRect.y + 4; break;\n      case \"nw\":\n        x = vpRect.x + 4; y = vpRect.y + 4; break;\n      case \"se\":\n        x = vpRect.x + vpRect.width - boxW - 4; y = vpRect.y + vpRect.height - boxH - 4; break;\n      case \"sw\":\n        x = vpRect.x + 4; y = vpRect.y + vpRect.height - boxH - 4; break;\n    }\n    x += opts.boxOffset.x; y += opts.boxOffset.y;\n\n    if (opts.background) {\n      const bg = parseColor(opts.background) || [0,0,0,128];\n      const r: [V2,V2,V2,V2] = [\n        new V2(x, y),\n        new V2(x + boxW, y),\n        new V2(x + boxW, y + boxH),\n        new V2(x, y + boxH),\n      ];\n      fillPolygon(app, r, bg as any);\n    }\n\n    let cx = x + pad;\n    let cy = y + pad + rowH / 2;\n\n    for (const it of this.items) {\n      const col = parseColor(it.color) || [255,255,255,255];\n      const sym = it.symbol ?? \"line\";\n\n      if (sym === \"marker\") {\n        fillCircle(app, new V2(Math.round(cx + sw/2), Math.round(cy)), Math.max(3, Math.floor(sw/3)), col as any);\n      } else if (sym === \"area\") {\n        const r: [V2,V2,V2,V2] = [\n          new V2(cx, cy - sw/2 + 3),\n          new V2(cx + sw, cy - sw/2 + 3),\n          new V2(cx + sw, cy + sw/2 - 3),\n          new V2(cx, cy + sw/2 - 3),\n        ];\n        fillPolygon(app, r, col as any);\n        drawLine(app, new V2(cx, cy - sw/2), new V2(cx + sw, cy - sw/2), col as any, 1);\n      } else {\n        drawLine(app, new V2(cx, cy), new V2(cx + sw, cy), col as any, 2);\n      }\n\n      app.drawText(it.label, new V2(cx + sw + 6, cy), opts.textColor, opts.font, \"left\", \"middle\");\n      cy += rowH;\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["V2", "_V2", "x", "y", "v", "sx", "sy", "l", "angle", "around", "c", "s", "xr", "yr", "a", "b", "t", "safeSpan", "min", "max", "eps", "c", "ViewportManager", "app", "worldBounds", "_viewport", "preserveAspect", "canvas", "dpr", "autoScaleViewport", "rect", "margin", "s", "xMin", "xMax", "yMin", "yMax", "V2", "lx", "ly", "l", "x", "y", "vp", "u", "v", "scale", "w", "h", "offsetX", "offsetY", "px", "py", "wx", "wy", "bounds", "numTicks", "sxMin", "sxMax", "syMin", "syMax", "rawStep", "step", "start", "ticks", "maxIndex", "i", "f", "nice", "boundsArray", "padding", "b", "width", "height", "padX", "padY", "mode", "dx", "dy", "span", "cx", "cy", "pixelAspect", "targetDy", "targetDx", "getDivViewport", "el", "getDrawableBounds", "d", "xs", "p", "ys", "drawables", "boundsArr", "NAMED", "clamp255", "v", "clamp01", "parseColor", "c", "r", "g", "b", "a", "s", "hex", "len", "hx", "i", "nums", "packABGR", "unpackABGR", "px", "blendRGBA", "dr", "dg", "db", "da", "sr", "sg", "sb", "sa", "dna", "sna", "outA", "inv", "toColor", "col", "arr", "rawLine", "app", "p0", "p1", "color", "col", "x0", "y0", "x1", "y1", "dx", "dy", "sx", "sy", "err", "buf", "e2", "rawPoint", "pos", "type", "size", "fillCircle", "V2", "half", "p", "strokeShape", "points", "width", "i", "d", "len", "u", "n", "o", "off", "c", "r", "r2", "xMin", "xMax", "yMin", "yMax", "pix", "w", "y", "dy2", "idx", "dr", "dg", "db", "da", "r0", "g0", "b0", "a0", "blendRGBA", "fillPolygon", "h", "minY", "maxY", "edges", "p2", "x2", "y2", "ymin", "ymax", "xAtYmin", "invSlope", "crossings", "e", "a", "b", "k", "xStart", "xEnd", "x", "drawLine", "drawCircleOutline", "segments", "pts", "t", "decimalsForStep", "step", "s", "fmtTick", "x", "decimals", "n", "Graph", "vp", "options", "parseColor", "y", "font", "color", "offset", "min", "max", "range", "stepRaw", "magnitude", "first", "ticks", "world", "xRange", "yRange", "drawables", "padding", "boundsArr", "getDrawableBounds", "b", "app", "vpRect", "xTicks", "yTicks", "decimalsX", "decimalsY", "drawX", "drawY", "p0", "p1", "drawLine", "x0", "x1", "y0", "y1", "t", "canvasPos", "V2", "Transform2D", "_Transform2D", "a", "b", "c", "d", "e", "f", "tx", "ty", "sx", "sy", "angle", "s", "m", "v", "V2", "pivot", "mat", "Drawable", "color", "fill", "fillColor", "transform", "Transform2D", "legend", "input", "parseColor", "DrawableFunction", "data", "opts", "app", "vp", "pPrev", "col", "i", "pNext", "drawLine", "pts", "p", "last", "first", "fillPolygon", "DrawableCircle", "center", "V2", "radius", "cWorld", "c", "sc", "r", "fillCircle", "drawCircleOutline", "DrawableLine", "p1", "p2", "a", "b", "p0", "strokeShape", "DrawablePoint", "pos", "pWorld", "rawPoint", "DrawableTriangle", "p3", "DrawableText", "text", "DrawableLabel", "PixelBuffer", "width", "height", "color", "c", "parseColor", "NAMED", "packed", "packABGR", "x", "y", "i", "dr", "dg", "db", "da", "r", "g", "b", "a", "blendRGBA", "srcImageData", "dx", "dy", "sw", "sh", "src", "w", "h", "startX", "startY", "endX", "endY", "sy", "rowOff", "sx", "tx", "sIdx", "dIdx", "sr", "sg", "sb", "sa", "alpha", "invAlpha", "TextCache", "capacity", "key", "v", "value", "firstKey", "CanvasRenderer", "canvas", "V2", "PixelBuffer", "TextCache", "obj", "color", "p", "img", "dx", "dy", "text", "pos", "font", "align", "baseline", "key", "entry", "ctx", "metrics", "w", "h", "tw", "th", "ox", "oy", "DynamicCanvasRenderer", "containerDiv", "options", "rect", "dpr", "rotatePoint", "p", "center", "angle", "rotateTriangleAroundCenter", "tri", "rotateTriangleVertical", "m", "Transform2D", "projectYRotation", "point", "Intercepts", "_Intercepts", "series", "out", "i", "y1", "y2", "x1", "x2", "app", "vp", "color", "col", "parseColor", "NAMED", "xs", "x", "fillCircle", "V2", "Scene", "items", "layerName", "drawables", "layer", "l", "item", "d", "app", "vp", "debugLayer", "meta", "a", "b", "SceneManager", "host", "scene", "id", "e", "onFrame", "loop", "t", "entry", "debounceMs", "timer", "UILabel", "text", "pos", "color", "font", "renderer", "margin", "safePos", "V2", "DebugUI", "_DebugUI", "Drawable", "fps", "now", "dt", "app", "el", "ui", "DrawableLegend", "Drawable", "items", "options", "label", "font", "m", "px", "app", "vp", "opts", "V2", "vpRect", "pad", "sw", "rowH", "textW", "it", "contentW", "boxW", "boxH", "x", "y", "bg", "parseColor", "r", "fillPolygon", "cx", "cy", "col", "sym", "fillCircle", "drawLine"]
}
